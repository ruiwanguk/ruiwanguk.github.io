<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rui Wang&#39;s Blog</title>
    <description>Hi there, I am Rui Wang. A software developer from Cambridge UK. I write about software development and architecture.</description>
    <link>http://ruiwanguk.github.com/</link>
    <atom:link href="http://ruiwanguk.github.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>On Technical Debt</title>
        <description>&lt;h3 id=&quot;what-is-technical-debt&quot;&gt;What is Technical Debt?&lt;/h3&gt;

&lt;p&gt;Technical debt represents the internal quality of a software project. This include too complex code, code duplication, lack of tests, violations found in static analysis and etc. &lt;/p&gt;

&lt;p&gt;To facilitate discussions with people from other domains, it is often introduced as a metaphor referencing the financial domain, where one views internal code quality problems as financial debt, the total amount of debt is the effort it would take to clean up the code base. Just like the normal debt that has interests, the longer you wait, the more effort it takes to solve the issue. &lt;/p&gt;

&lt;h3 id=&quot;why-is-it-important&quot;&gt;Why is it important?&lt;/h3&gt;

&lt;p&gt;From software engineering point of view, we all aim for good architecture and clean maintainable code when working on a project, we believe that by improving the quality of the code base will lead to increase in business values in the long run. &lt;/p&gt;

&lt;p&gt;If we don’t address the technical debts, they will inevitably surface up and backfire at some point. In the worst cases, they can render the whole team standstill.  &lt;/p&gt;

&lt;p&gt;What are the common misunderstanding of Technical Debt? &lt;/p&gt;

&lt;p&gt;Technical debts are often viewed as bad, and we should address these issues as early as possible. But is it really true? &lt;/p&gt;

&lt;p&gt;First of all, unlike financial debt, you don’t have to pay back the technical debts. If one piece of code or a component will remain unchanged, then it doesn’t make sense to re-factor the code, it will bring nothing in return for the business. Like any other long term software project, my team also have legacy systems and legacy tools, they are often not less used and causing us and our users no problems, so these cases, it doesn’t make sense to rewrite these code to make them better. &lt;/p&gt;

&lt;p&gt;Second, like financial debt, it can be a good thing to have technical debt. In finance, if your return in investment is higher than the amount you borrowed plus the interests, then it makes absolute sense to have the debt. Likewise, if you are building a software product and the time to market is very important, then it makes sense to sacrifice the quality for speed. In fact, a lot of successful companies, such Twitter, Facebook, and Amazon, they are constantly rewriting their system, but their time-to-market has yielded huge financial rewards.&lt;/p&gt;

&lt;h3 id=&quot;how-should-we-approach-technical-debts&quot;&gt;How should we approach technical debts?&lt;/h3&gt;

&lt;p&gt;Technical debts are unavoidable! For every project, there will be multiple external impact factors. There may well be time pressure, where developers are forced to make short-term gain by sacrificing the quality. Also, the experience of the team is not equal, there will be some senior developers and some junior developers, they will not produce the same level of quality code. Lastly, the technology is constantly improving, new techniques are created all the time. Even if your code is well designed, overtime, it could be that a new technique comes along and renders the code obsolete.  &lt;/p&gt;

&lt;p&gt;Rather than view technical debts as bad, one should view them as investment in the product. Investment in quality will have its benefits, at the same time, it will have associated cost. If the benefits out weight the cost, then the investment in quality should be made. However, if the cost is far higher than the benefits, then one should think again before act. &lt;/p&gt;

&lt;h3 id=&quot;related-links&quot;&gt;Related links&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://martinfowler.com/bliki/TechnicalDebt.html&quot;&gt;Technical debt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/articles/managing-technical-debt&quot;&gt;Managing technical debt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/articles/no-more-technical-debt&quot;&gt;No more technical debt - investment in quality&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.se-radio.net/2015/04/episode-224-sven-johann-and-eberhard-wolff-on-technical-debt/&quot;&gt;Technical debt - Software Engineering Radio&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 17 May 2015 21:27:19 +0100</pubDate>
        <link>http://ruiwanguk.github.com/software,/project/management/2015/05/17/on-technical-debt/</link>
        <guid isPermaLink="true">http://ruiwanguk.github.com/software,/project/management/2015/05/17/on-technical-debt/</guid>
      </item>
    
      <item>
        <title>/dev/winter</title>
        <description>&lt;p&gt;Below are my notes on &lt;a href=&quot;http://devcycles.net/2015/winter/&quot; title=&quot;dev winter&quot;&gt;/dev/winter&lt;/a&gt; 2015, a free, one-day event for software developers in Cambridge area.&lt;/p&gt;

&lt;h3 id=&quot;overall&quot;&gt;Overall&lt;/h3&gt;

&lt;p&gt;The conference is well organized, right mix of people, good venue and food. The balance feels right, the &lt;a href=&quot;http://devcycles.net/2015/winter/programme/&quot; title=&quot;dev winter programme&quot;&gt;programme&lt;/a&gt; has a range of talks from machine learning to software design while maintaining practicability.&lt;/p&gt;

&lt;h3 id=&quot;first-session-modeling-complex-game-economy-with-neo4j&quot;&gt;First session: Modeling complex game economy with Neo4j&lt;/h3&gt;

&lt;p&gt;The first talk, given by &lt;a href=&quot;http://theburningmonk.com/&quot;&gt;Yan Cui&lt;/a&gt; from &lt;a href=&quot;http://www.gamesyscorporate.com/&quot;&gt;Gamesys&lt;/a&gt;, was both clear and informative. Yan showed us how you could use &lt;a href=&quot;http://neo4j.com/&quot;&gt;Neo4j&lt;/a&gt;, a NOSQL database for graph data, to help on modeling and balancing the economy of a large scale on-line game. &lt;/p&gt;

&lt;p&gt;The key takeaway messages are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Use Neo4j to model the play content as a interconnected network. Each play item will be represented as a node, whereas the edge between the nodes describes the relationship between the items. For example, to make a bread you need some flour, both bread and flour will be a separate node in the play content network. Therefore, if you change the price of the flour, the price of the bread will also be affected. This effect can be investigated using simple Neo4j queries. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Neo4j can only be run on one machine, and cannot be partitioned into different machines.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GameSys is using &lt;a href=&quot;http://en.wikipedia.org/wiki/Genetic_algorithm&quot;&gt;genetic algorithmm&lt;/a&gt; written in &lt;a href=&quot;http://fsharp.org/&quot;&gt;F#&lt;/a&gt; to model and propose solutions for balancing the game playability. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GameSys’s entire system is based on &lt;a href=&quot;http://aws.amazon.com/ec2/&quot;&gt;Amazon EC2&lt;/a&gt;. They are using technologies such as: &lt;a href=&quot;http://aws.amazon.com/dynamodb/&quot;&gt;Amazon DynamoDB&lt;/a&gt;, &lt;a href=&quot;http://memcached.org/&quot;&gt;MemCached&lt;/a&gt;, &lt;a href=&quot;http://couchdb.apache.org/&quot;&gt;CouchDB&lt;/a&gt;.  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;second-session-git-for-teams-of-one-or-more&quot;&gt;Second session: Git for teams of one or more&lt;/h3&gt;

&lt;p&gt;I picked this practical session since our team is making the transition from SVN to Git. &lt;a href=&quot;https://twitter.com/emmajanehw&quot;&gt;Emma Jane&lt;/a&gt;, the workshop organizer, has been doing training on source control system for many years. You can find her slides &lt;a href=&quot;http://gitforteams.com/workshops/devwinter&quot;&gt;here&lt;/a&gt;, and she is also writing a book, called &lt;a href=&quot;http://gitforteams.com/resources/offsite.html&quot;&gt;Git for Teams&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The key takeaway messages are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Documentation on agreed git workflow is necessary for the team. This document should outline how the team members interact with the code. It should also provide a governance strategy and branching strategy for the project.&lt;/li&gt;
  &lt;li&gt;Different branching strategies for different use cases. If you are doing scheduled release, you can use either &lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;Gitflow&lt;/a&gt; or &lt;a href=&quot;http://drewfradette.ca/a-simpler-successful-git-branching-model/&quot;&gt;Simplified Gitflow&lt;/a&gt;. If you are doing constant integration, you can choose either &lt;a href=&quot;https://www.acquia.com/blog/pragmatic-guide-branch-feature-git-branching-strategy&quot;&gt;Branch Per Feature&lt;/a&gt; or &lt;a href=&quot;http://scottchacon.com/2011/08/31/github-flow.html&quot;&gt;GitHub Flow&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;To view the commit history and the relations between different commits, there are several tools you can use: &lt;a href=&quot;http://git-scm.com/docs/git-log&quot;&gt;log&lt;/a&gt;, &lt;a href=&quot;http://git-scm.com/docs/gitk&quot;&gt;gitk&lt;/a&gt;, &lt;a href=&quot;http://git-scm.com/docs/git-blame&quot;&gt;blame&lt;/a&gt; and &lt;a href=&quot;http://git-scm.com/docs/git-bisect&quot;&gt;bisect&lt;/a&gt;. &lt;/li&gt;
  &lt;li&gt;Emma highlighted the differences between &lt;a href=&quot;http://stackoverflow.com/questions/16666089/whats-the-difference-between-git-merge-and-git-rebase&quot;&gt;merging and rebasing&lt;/a&gt;. She recommended against using rebasing if it does not provide additional benefits for the team.  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;third-session-java-is-dead-long-live-scala-kotlin-ceylon-etc&quot;&gt;Third session: Java is dead, long live Scala, Kotlin, Ceylon, etc&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.russel.org.uk/&quot;&gt;Russel Winder&lt;/a&gt; showed the differences between several JVM based languages, namely Java, Scala, Kotlin, Ceylon, Groovy, Fantom and Goush. The demo was based on approximating pi using quadrature. The main idea is to investigate scaling to see how different languages solve this parallel problem. You can find all his code examples from &lt;a href=&quot;https://github.com/russel/Pi_Quadrature&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The key messages are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Scala has its own implementation of data structures, whereas Kotlin is using Java’s native data structures. &lt;/li&gt;
  &lt;li&gt;Groovy can now be run on Android, all its nice functional programming features are already available and can be used on Android devices directly. &lt;/li&gt;
  &lt;li&gt;Groovy is not as slow as before, it offers comparable performance to Java.&lt;/li&gt;
  &lt;li&gt;Scala, Kotlin, Groovy are all offering functional-style parallelization. This lead however has been cut short since the introduction of Java 8. &lt;/li&gt;
  &lt;li&gt;Upgrade to Java 8 to take advantage of &lt;a href=&quot;http://www.oracle.com/technetwork/tutorials/tutorials-1876574.html&quot;&gt;G1 garbage collector&lt;/a&gt;, &lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html&quot;&gt;Nashorn&lt;/a&gt;, &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&quot;&gt;Lambda&lt;/a&gt; features. &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;fourth-session-how-to-ditch-the-debugger-and-use-logging-instead&quot;&gt;Fourth session: How to ditch the debugger and use logging instead&lt;/h3&gt;

&lt;p&gt;The main motivation behind this tutorial is to address the problem that one cannot attach the debugger to the application in Production, and debugging in a distributed environment is even more challenging. Logging can be used in a way which means you can diagnose problems very easily in both development and production.&lt;/p&gt;

&lt;p&gt;The key messages are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Event tracing, which is a specialized use of logging to record information about a system’s execution. This tracing can be used to log different execution steps as well as record their performances. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For any system, there are different types of events, these can be categorized as technical level events, e.g. database connection, out-of-memory, or domain level events, e.g. bank transaction, user login. Also, depending on the nature of the events, one can categorize them into unknown events or defined events. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is important to assign event type id for each event, as this will help to group and interpret the logs. In Java, a typical way of defining these event type IDs is to use &lt;em&gt;enum&lt;/em&gt;. When used in a distributed system, these event type IDs can be passed between different services, this will enable the developers to trace the events occurred on different systems. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It can be difficult to choose a severity level (such as ERROR, WARNING, etc) for logging which will be appropriate for production, as the severity of an event type may need to be changed after the application has been deployed based on experience of running the application. Different environment (Dev, Test, Production) may also require different severity levels. Therefore, it is better to have the severity level of all events configurable. There is a nice blog &lt;a href=&quot;http://blog.matthewskelton.net/2012/12/05/tune-logging-levels-in-production-without-recompiling-code/&quot;&gt;post&lt;/a&gt; about how to archive this in the production system.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Event-tracing based logging using the Elasticsearch ELK Stack, which includes &lt;a href=&quot;http://www.elasticsearch.org/overview/elasticsearch&quot;&gt;Elasticsearch&lt;/a&gt;, &lt;a href=&quot;http://www.elasticsearch.org/overview/logstash&quot;&gt;Logstash&lt;/a&gt; and &lt;a href=&quot;http://www.elasticsearch.org/overview/kibana&quot;&gt;Kibana&lt;/a&gt;. Logstash takes logs and other event data from the systems and store them in a central place. Elasticsearch is then used for indexing the logs for searching and access. Kibana works with Elasticsearch to visualize logs and time-stamped data. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use a virtual machine manager called &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;, which allows the user to script virtual machine configuration as well as the provisioning, to setup the Elasticsearch ELK Stack. The demo can be found &lt;a href=&quot;https://github.com/SkeltonThatcher/velk-demo&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;remarks&quot;&gt;Remarks&lt;/h3&gt;
&lt;p&gt;All in all, a very good one-day conference. Look forward to /dev/summer 2015. &lt;/p&gt;

</description>
        <pubDate>Thu, 29 Jan 2015 20:27:19 +0000</pubDate>
        <link>http://ruiwanguk.github.com/conference/2015/01/29/notes-on-dev-winter/</link>
        <guid isPermaLink="true">http://ruiwanguk.github.com/conference/2015/01/29/notes-on-dev-winter/</guid>
      </item>
    
      <item>
        <title>Understand Hadoop build-in counters</title>
        <description>&lt;p&gt;Finding the performance bottleneck of a Hadoop job can be tricky. &lt;a href=&quot;https://www.inkling.com/read/hadoop-definitive-guide-tom-white-3rd/chapter-8/counters&quot;&gt;Counters&lt;/a&gt; are often a quick and cheap way of gathering statistics across all the mappers and reducers. This makes them particularly useful for problem diagnosis. By default, Hadoop provides a set of built-in counters for every job. In this post, I will try to explain the purpose of each counter, and how to combine them to make informed judgment about the job.  &lt;/p&gt;

&lt;h3 id=&quot;case-study&quot;&gt;Case study&lt;/h3&gt;
&lt;p&gt;Through out this post, I will try to use the &lt;a href=&quot;https://code.google.com/p/spectra-cluster/&quot;&gt;PRIDE Cluster&lt;/a&gt; project as a example. The project is an implementation of spectrum clustering algorithm using Hadoop. The input consists of a group of spectra produced by mass spectrometer, the outputs are clusters of spectra. The algorithm tries to cluster spectra together based on their similarity. &lt;/p&gt;

&lt;p&gt;The Hadoop implementation consists of three clustering jobs and one output job. Clustering jobs group spectra together using different pre-conditions, either they are sharing the same highest peak or they falls into the same m/z window. The output job writes out the clusters into a customized output format for downstream database loading and data analysis. &lt;/p&gt;

&lt;h3 id=&quot;mapper-counters&quot;&gt;Mapper counters&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Map input records&lt;/strong&gt;: The number of key-value pairs consumed by all the mapper tasks. It is incremented every time there is a new pair been passed to a mapper to process. This counter shows you the number of entries has been parsed from your dataset. In the case of PRIDE Cluster, we have a job to read a large number of spectra produced by mass spectrometer. This counter would tell us that how many spectra have been read.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Map output records&lt;/strong&gt;: The number of key-value pairs produced by all the mapper tasks. It is incremented every time when you call &lt;em&gt;context.write()&lt;/em&gt; method in your mapper. In case of PRIDE Cluster, the output of each mapper is either spectra or clusters produced by previous steps. This counter would show the number of spectra/clusters have been sent to the reducers. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Map output bytes&lt;/strong&gt;: The total number of bytes send by all the mapper tasks to the reducers. In PRIDE Cluster, this would tell us whether the data has been produced properly, if this number of too low, this means something is wrong with either the loading process or the mapping process.&lt;/p&gt;

&lt;h3 id=&quot;reducer-counters&quot;&gt;Reducer counters&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Reduce input groups&lt;/strong&gt;: The number of key groups consumed by all the reducer tasks. It is incremented every time a new key has been passed into the reducer. For PRIDE Cluster, a group of spectra may share one highest peak, this highest peak is used to group these spectra together for reducing. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reduce input records&lt;/strong&gt;: This is the number of key-value pairs passed to all the reducers. It is incremented every time when a new value has been consumed. In PRIDE Cluster, the values are clusters produced by the mappers. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reduce output records&lt;/strong&gt;: The number of reduce outputs generated by all the reducer tasks. It is incremented every time when &lt;em&gt;context.write()&lt;/em&gt; was called in reducer. This counter is particular useful for PRIDE Cluster jobs, as it tells us how many clusters in total have been produced.&lt;/p&gt;

&lt;p&gt;Sometimes, combining the results of two counters can give optimization hints. For example, if the “Reduce input groups” counter is significantly smaller than the ‘Reduce input records’ counter, this often indicates there were a lot network shuffling. It might be a good idea to consider writing a combiner to reduce the network traffic.&lt;/p&gt;

&lt;h3 id=&quot;combiner-counters&quot;&gt;Combiner counters&lt;/h3&gt;
&lt;p&gt;Combiners can be considered as mini-reducers. Instead of sending every key-value pairs across the network, combiners are run on the same instance of the mapper, before sending key-value pair for shuffling. A customized combiner can be extremely useful on reducing network traffic during a Hadoop job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Combine input records&lt;/strong&gt;: The number of input records consumed by all the combiners. Incremented every time there is a value consumed by the combiner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Combine output records&lt;/strong&gt;: The number of output records produced by all the combiners. Incremented every time there is a value been written out.&lt;/p&gt;

&lt;p&gt;Combining these two counters, you can often infer the effectiveness of the combiners. &lt;/p&gt;

&lt;h3 id=&quot;other-counters&quot;&gt;Other counters&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spilled records&lt;/strong&gt;: The number of records spilled to disk for all mappers and reducers.&lt;/p&gt;

&lt;h3 id=&quot;other-resources&quot;&gt;Other resources&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.cloudera.com/blog/2009/12/7-tips-for-improving-mapreduce-performance/&quot;&gt;7 Tips for Improving MapReduce Performance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.inkling.com/read/hadoop-definitive-guide-tom-white-3rd/chapter-8/counters&quot;&gt;Hadoop: The Definetive Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.philippeadjiman.com/blog/2010/01/14/hadoop-tutorial-series-issue-4-to-use-or-not-to-use-a-combiner/&quot;&gt;To use or not to use a combiner&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Nov 2014 20:27:19 +0000</pubDate>
        <link>http://ruiwanguk.github.com/bigdata/hadoop/2014/11/19/hadoop-build-in-counter/</link>
        <guid isPermaLink="true">http://ruiwanguk.github.com/bigdata/hadoop/2014/11/19/hadoop-build-in-counter/</guid>
      </item>
    
      <item>
        <title>Cross-Origin Resource Sharing (CORS)</title>
        <description>&lt;p&gt;While implementing the new version of PRIDE Cluster website, a colleague of mine added a simple implementation (see code below) of Cross-Origin Resource Sharing (CORS) into the web service. This got me a bit curious and decided to do a bit research around this topic.  &lt;/p&gt;

&lt;p&gt;First, let’s start from the origin of the problem. &lt;/p&gt;

&lt;h3 id=&quot;same-origin-policy&quot;&gt;Same-origin policy&lt;/h3&gt;

&lt;p&gt;The same-origin policy restricts how a document or script loaded from one origin can interact with a resource from another origin. The primarily used as a way of preventing the &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_request_forgery&quot;&gt;Cross-site Request Forgery&lt;/a&gt; attack. &lt;/p&gt;

&lt;p&gt;By definition, two documents have the same origin if the access protocol, port (if one is specified) and host are the same. &lt;/p&gt;

&lt;p&gt;For example, if you have a page: &lt;em&gt;http://www.ebi.ac.uk/pride&lt;/em&gt; is trying to access a web service at &lt;em&gt;http://www.ebi.ac.uk/pride/ws/archive/project/PXD000001&lt;/em&gt;, this will not be blocked by the browser’s same origin component. &lt;/p&gt;

&lt;p&gt;However, if you deploy the web service under another domain, &lt;em&gt;http://www.proteomexchange.org/pride/ws/archive/project/PXD000001&lt;/em&gt;, this request will be automatically blocked. &lt;/p&gt;

&lt;p&gt;Now, there are exceptions to these rules depending on the browser, and these exceptions are often non-standard. For instance in Internet Explorer, it has two exceptions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Trust zone: if both domains are in highly trusted zone. e.g. corporate domains. The same-origin policy will not apply. &lt;/li&gt;
  &lt;li&gt;Port: IE doesn’t include port as part of their same-origin component. Therefore, for &lt;em&gt;http://www.ebi.ac.uk:8080/pride&lt;/em&gt; can access content stored at &lt;em&gt;http://www.ebi.ac.uk:8081/pride&lt;/em&gt;. &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;cross-origin-network-access&quot;&gt;Cross-origin network access&lt;/h3&gt;

&lt;p&gt;The same-origin policy controls the interactions between two different origins. Such as: when you follow a link on a web page, or encounter a &amp;lt;img&amp;gt; tag which points to an image on a different domain. These interactions can be classified into three categories:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Cross-origin writes are generally allowed. Such as: links, redirections and form submissions. &lt;/li&gt;
  &lt;li&gt;Cross-origin reads are typically not allowed, but this can be leaked by embedding (below). &lt;/li&gt;
  &lt;li&gt;Cross-origin embeddings are typically allowed. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here are some examples of cross-origin embedding:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;JavaScript with &lt;em&gt;&amp;lt;script src=”…”&amp;gt;&amp;lt;/script&amp;gt;&lt;/em&gt;. It is worth highlighting that error messages for syntax errors are only available on same-origin scripts.&lt;/li&gt;
  &lt;li&gt;Images with &lt;em&gt;&amp;lt;img&amp;gt;&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Media files with &lt;em&gt;&amp;lt;video&amp;gt;&lt;/em&gt; and &lt;em&gt;&amp;lt;audio&amp;gt;&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;cross-origin-resource-sharing-cors&quot;&gt;Cross-origin resource sharing (CORS)&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.w3.org/2008/webapps/&quot;&gt;Web Application Working Group&lt;/a&gt; has recommended the new &lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;Cross-Origin Resource Sharing&lt;/a&gt; (CORS) mechanism. It provides a way for web servers to support cross-site access controls and enable secure cross-site data transfers. &lt;/p&gt;

&lt;p&gt;The CORS standard works by adding new HTTP headers that allow servers to describe the set of origins that are permitted to read that information using a web browser. Additionally, for HTTP request methods can cause side-effects on user data, for example, HTTP methods other than GET, HEAD or POST with certain mime types, the standard requires the browsers to ‘preflight’ the request. ‘preflight’ basically sends an HTTP OPTIONS request method to the server first, then once the server ‘approves’ the request, it sends the actually request to the server. The server can also notify the clients whether the Cookies or HTTP authentication data should be sent with requests. &lt;/p&gt;

&lt;h3 id=&quot;cors-code-example&quot;&gt;CORS code example&lt;/h3&gt;

&lt;p&gt;Going back the code added by my colleague, It is easy to follow if you know a bit about Java Servlet and its filter (Original implementation can be found in a &lt;a href=&quot;https://spring.io/guides/gs/rest-service-cors/&quot;&gt;blog post&lt;/a&gt; from Spring Framework. &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ruiwanguk/bd5f0274f3c547e9b156.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;From the code, you can see that CORS is archived by adding four HTTP response headers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Access-Control-Allow-Origin: *

Access-Control-Allow-Methods: POST, GET, OPTIONS, DELETE

Access-Control-Max-Age: 3600

Access-Control-Allow-Headers: x-requested-with
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Access-Control-Allow-Origin&lt;/strong&gt; header defines domains that are allowed as the origin. In this case, we are allowing any domain using a wild card. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Access-Control-Allow-Methods&lt;/strong&gt; header defines the HTTP methods that are allowed. Here, we are allowing POST, GET, OPTIONS and DELETE.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Access-Control-Max-Age&lt;/strong&gt; header indicates how long the results of a preflight request can be cached in seconds. We are allowing 1 hour in this case. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Access-Control-Allow-Headers&lt;/strong&gt; is used in response to a preflight request to indicate which HTTP headers to be used when making the actual request. &lt;/p&gt;

&lt;p&gt;There are also two other headers which were not used in our code example. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Access-Control-Allow-Credentials: true
Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header     
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Access-Control-Allow-Credentials&lt;/strong&gt; indicates whether or not the response can be exposed when the credential is used. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Access-Control-Expose-Headers&lt;/strong&gt; header lets the server whitelist headers that browsers are allowed to access. The above example allows &lt;em&gt;X-My-Custom-Header&lt;/em&gt; and &lt;em&gt;X-Another-Custom-Header&lt;/em&gt;. &lt;/p&gt;

&lt;h3 id=&quot;other-resources&quot;&gt;Other resources&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS&quot;&gt;HTTP access control (CORS)&lt;/a&gt; provides a general description and a good example on how to enable CORS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;Cross-Origin Resource Sharing Standard&lt;/a&gt; is the official standard by W3C published in 16 Jan 2014.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;Same-Origin Policy&lt;/a&gt; explains the policy in details. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://arunranga.com/examples/access-control/&quot;&gt;CORS in action&lt;/a&gt; provides examples for CORS access.&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Nov 2014 20:27:19 +0000</pubDate>
        <link>http://ruiwanguk.github.com/web/2014/11/11/http-access-control/</link>
        <guid isPermaLink="true">http://ruiwanguk.github.com/web/2014/11/11/http-access-control/</guid>
      </item>
    
      <item>
        <title>Constructor in JavaScript</title>
        <description>&lt;p&gt;Constructor in JavaScript is often a source of confusion for people new to the language. Particularly if coming from a classical language (such as Java or C#), it can feel a bit alien at first. This post is aimed at clarifying the mechanical details behind the constructor, also serves as a self reminder on the inner workings of JavaScript. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Friendly warning&lt;/strong&gt;: Please make sure you have some basic understanding of JavaScript before reading further. &lt;/p&gt;

&lt;h3 id=&quot;inheritance&quot;&gt;Inheritance&lt;/h3&gt;

&lt;p&gt;In classical languages (such as Java), inheritance provides two key benefits. First, it is the foundation for code reuse. Some people would argue that &lt;a href=&quot;http://en.wikipedia.org/wiki/Polymorphism_(computer_science)&quot;&gt;Polymorphism&lt;/a&gt; should be the correct term, but it is really just a clever way of making minor changes to code while retaining most of the business logic. Second, it is important for static type language to avoid casting between similar types. &lt;/p&gt;

&lt;p&gt;JavaScript on the other hand is a loosely typed programming language. This means that it does not need to cast. Therefore for JavaScript, the object’s own inheritance hierarchy is not important, what matters is what it does.&lt;/p&gt;

&lt;p&gt;JavaScript’s inheritance is prototypal by nature. Unlike the classical languages, it does not have the concept of ‘&lt;em&gt;Class&lt;/em&gt;’. Instead, inheritance is archived directly via objects. &lt;em&gt;Object A&lt;/em&gt; can inherit &lt;em&gt;Object B&lt;/em&gt;’s methods and variables only if &lt;em&gt;Object B&lt;/em&gt; is a ‘prototype’ of the object. The root of this object inheritances is always Object.prototype.&lt;/p&gt;

&lt;p&gt;For example, you can create an object using the JavaScript object literal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// create an empty object
var myObj = {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The object created in the above code seems to be empty, but actually it has a hidden reference to &lt;em&gt;Object.prototype&lt;/em&gt;. Now, there are two key points worth highlighting here:&lt;/p&gt;

&lt;p&gt;First, an object’s prototype is always hidden: this seems so obvious, but it is so easy to get this concept wrong. What I mean by hidden? Once a object’s prototype is assigned, it can not be accessed by code directly, and also it can not be re-assigned.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// This will return nothing
console.log(myObj.prototype)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Second, do not confuse &lt;em&gt;Object.prototype&lt;/em&gt; with an object’s prototype. &lt;em&gt;Object.prototype&lt;/em&gt; is &lt;em&gt;Object&lt;/em&gt;’s ‘prototype’ property, whereas object’s prototype is the object created and inherited from. The reason why this is done this way will be become clear in the next section.&lt;/p&gt;

&lt;h3 id=&quot;constructor&quot;&gt;Constructor&lt;/h3&gt;

&lt;p&gt;As mentioned by Douglas Crockford in &lt;a href=&quot;http://shop.oreilly.com/product/9780596517748.do&quot;&gt;JavaScript:The Good Parts&lt;/a&gt;, JavaScript is conflicted about its prototypal nature. It was trying to emulate classical languages on constructing objects using the ‘&lt;em&gt;new&lt;/em&gt;’ keyword. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// a simple constructor
var MyConstructor = function () {
	this.name = &quot;Rui&quot;;
}

// create a new object
var myObj = new MyConstructor();

// prints &#39;Rui&#39;
console.log(myObj.name);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What happened was that a new object will be created if the &lt;em&gt;myConstructor&lt;/em&gt; function is invoked with the ‘&lt;em&gt;new&lt;/em&gt;’ prefix. ‘&lt;em&gt;this&lt;/em&gt;’ in the constructor function will be bound to the newly created object, and all the properties will be added to the new object directly. The new object will be returned as the result of the constructor call. &lt;/p&gt;

&lt;p&gt;More importantly, the prototype of the newly created object (&lt;em&gt;myObj&lt;/em&gt;) is the value of the function’s ‘prototype’ property. So if we change the code slightly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// a simple constructor
var MyConstructor = function () {
	this.name = &quot;Rui&quot;;
}

MyConstructor.prototype = {surname : &quot;Wang&quot;};

// create a new object
var myObj = new MyConstructor();

// prints &#39;Wang&#39;
console.log(myObj.surname);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above, we have assigned a new object to &lt;em&gt;MyConstructor.prototype&lt;/em&gt; with property ‘surname’. &lt;em&gt;myObj&lt;/em&gt; inherits this property, so the value of &lt;em&gt;MyConstructor.prototype&lt;/em&gt; becomes the prototype of &lt;em&gt;myObj&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;All constructor functions are normal functions in JavaScript. When a function object is created, the code that produces the function object runs something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.prototype = {constructor : this}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So by default, invoking ‘&lt;em&gt;new&lt;/em&gt;’ on a constructor is going to produce an object that its prototype has a ‘constructor’ property, this property points to the original constructor function object. &lt;/p&gt;

&lt;h3 id=&quot;alternative&quot;&gt;Alternative&lt;/h3&gt;

&lt;p&gt;Instead of calling the constructor, one can adopt the coding pattern suggested by Douglas Crockford:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (typeof Object.create !== &#39;function&#39;) {
	Object.create = function (o) {
		var F = function() {};
		F.prototype = o;
		return new F();
	};
}

var newObj = Object.create(oldObj);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;other-resources&quot;&gt;Other resources&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://zeekat.nl/articles/constructors-considered-mildly-confusing.html&quot;&gt;Constructors Considered Mildly Confusing&lt;/a&gt; provides nice diagrams that illustrate the points above.&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Nov 2014 20:27:19 +0000</pubDate>
        <link>http://ruiwanguk.github.com/javascript/2014/11/04/JavaScript-Constructor/</link>
        <guid isPermaLink="true">http://ruiwanguk.github.com/javascript/2014/11/04/JavaScript-Constructor/</guid>
      </item>
    
      <item>
        <title>Access MySQL using R</title>
        <description>&lt;p&gt;For data scientists, getting and cleaning data is one of most important step in their data analysis work flow. High quality data paves the way for well structured and executed data analysis, whereas poor quality data can often lead to misguided discoveries.  &lt;/p&gt;

&lt;p&gt;Relational DBMS such as MySQL and Oracle are frequently used to store preprocessed and structured data. It is therefore important to understand how to connect to relational databases and retrieve required information from its tables. In this post, I will cover how to use R to access MySQL databases. &lt;/p&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;p&gt;Before you can connect to MySQL, you need to install RMySQL packages in your R. If you are using Mac, it is fairly straightforward. Simply type the following command in your R terminal. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; install.packages(&quot;RMySQL&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are using Windows, it is a bit more complicated. But this is already well documented on &lt;a href=&quot;http://cran.r-project.org/web/packages/RMySQL&quot;&gt;RMySQL official site&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;connect-to-mysql&quot;&gt;Connect to MySQL&lt;/h3&gt;

&lt;p&gt;Now you are ready to go, make sure that you have an existing MySQL database which you have access permission. Or, you can &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.1/en/installing.html&quot;&gt;install MySQL&lt;/a&gt; locally and create a test database yourself. &lt;/p&gt;

&lt;p&gt;Here, I am using the public facing MySQL instance provided by the Proteomics Identifications data (&lt;a href=&quot;http://www.ebi.ac.uk/pride&quot;&gt;PRIDE&lt;/a&gt;). It stores the protein and peptide identification evidences produced by mass spectrometers. Here are the database connection details:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host: 193.62.194.210
Port: 5000 
Database: pride_2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to use the same database as your playground, please check the connection command below for user name and password. But do be careful with the mass selects and joins, as these queries can consume a lot of resources and return many rows of data.&lt;/p&gt;

&lt;p&gt;Connect to the database using the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; con &amp;lt;- dbConnect(MySQL(), user=&quot;inspector&quot;, password=&quot;inspector&quot;, 
	dbname=&quot;pride_2&quot;, host=&quot;193.62.194.210&quot;, port=5000)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;query-mysql&quot;&gt;Query MySQL&lt;/h3&gt;

&lt;p&gt;So you are now connected, you try the following commands to list tables and list the fields in a table:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# list tables
&amp;gt; dbListTable(con)

# list fields in the &#39;pride_experiment&#39; table
&amp;gt; dbListFields(con, &quot;pride_experiment&quot;)	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also do a select query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# count the number of rows in the &#39;pride_experiment&#39; table
&amp;gt; dbGetQuery(con, &quot;select count(*) from pride_experiment&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you want to page your results:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# get the first 100 rows from the &#39;pride_experiment&#39; table
&amp;gt; rs &amp;lt;- dbSendQuery(con, &quot;select * from pride_experiment limit 1000&quot;)
&amp;gt; data &amp;lt;- fetch(rs, 100)

# or you can get all the records in one go using -1
&amp;gt; data &amp;lt;- fetch(rs, -1)

# once you are done, you should clear the result set
&amp;gt; dbClearResult(rs)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;close-your-connections&quot;&gt;Close your connections&lt;/h3&gt;

&lt;p&gt;Finally, it is important that you remember to close the connection once you done:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; dbDisconnect(con)		
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;other-resources&quot;&gt;Other resources&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://cran.r-project.org/web/packages/RMySQL/RMySQL.pdf&quot;&gt;RMySQL vignette&lt;/a&gt; provides a list of commonly used commands&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.r-bloggers.com/mysql-and-r/&quot;&gt;MySQL and R&lt;/a&gt; is a nice blog post on additional RMySQL tips. &lt;/p&gt;
</description>
        <pubDate>Tue, 14 Oct 2014 09:47:19 +0100</pubDate>
        <link>http://ruiwanguk.github.com/r/database/2014/10/14/how-access-mysql-using-r/</link>
        <guid isPermaLink="true">http://ruiwanguk.github.com/r/database/2014/10/14/how-access-mysql-using-r/</guid>
      </item>
    
  </channel>
</rss>
