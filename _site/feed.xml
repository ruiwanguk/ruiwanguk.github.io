<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rui Wang&#39;s Blog</title>
    <description>Hi there, I am Rui Wang. A software developer from Cambridge UK. I write about software development and architecture.</description>
    <link>http://ruiwanguk.github.com/</link>
    <atom:link href="http://ruiwanguk.github.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Constructor in JavaScript</title>
        <description>&lt;p&gt;Constructor in JavaScript is often a source of confusion for people new to the language. Particularly if coming from a classical languages (such as Java or C#), it can feel a bit alien at first. This post is aimed at clarifying the mechanical details behind the constructor, also serves as a self reminder on the inner workings of JavaScript. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Friendly warning&lt;/strong&gt;: Please make sure you have some basic understanding of JavaScript before reading further. &lt;/p&gt;

&lt;h3 id=&quot;inheritance&quot;&gt;Inheritance&lt;/h3&gt;

&lt;p&gt;In classical languages (such as Java), inheritance provides two key benefits. First, it is the foundation for code reuse. Some people would argue that &lt;a href=&quot;http://en.wikipedia.org/wiki/Polymorphism_(computer_science)&quot;&gt;Polymorphism&lt;/a&gt; should be the correct term, but it is really just a clever way of making minor changes to code while retaining most of the business logic. Second, it is important for static type language to avoid casting between similar types. &lt;/p&gt;

&lt;p&gt;JavaScript on the other hand is a loosely typed programming language. This means that it does not need to cast. Therefore for JavaScript, the object’s own inheritance hierarchy is not important, what matters is what it does.&lt;/p&gt;

&lt;p&gt;JavaScript’s inheritance is prototypal by nature. Unlike the classical languages, it does not have the concept of ‘&lt;em&gt;Class&lt;/em&gt;’. Instead, inheritance is archived directly via objects. &lt;em&gt;Object A&lt;/em&gt; can inherit &lt;em&gt;Object B&lt;/em&gt;’s methods and variables only if &lt;em&gt;Object B&lt;/em&gt; is a ‘prototype’ of the object. The root of this object inheritances is always Object.prototype.&lt;/p&gt;

&lt;p&gt;For example, you can create an object using the JavaScript object literal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// create an empty object
var myObj = {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The object created in the above code seems to be empty, but actually it has a hidden reference to &lt;em&gt;Object.prototype&lt;/em&gt;. Now, there are two key points worth highlighting here:&lt;/p&gt;

&lt;p&gt;First, an object’s prototype is always hidden: this seems so obvious, but it is so easy to get this concept wrong. What I mean by hidden? Once a object’s prototype is assigned, it can not be accessed by code directly, and also it can not be re-assigned.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// This will return nothing
console.log(myObj.prototype)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Second, do not confuse &lt;em&gt;Object.prototype&lt;/em&gt; with an object’s prototype. &lt;em&gt;Object.prototype&lt;/em&gt; is &lt;em&gt;Object&lt;/em&gt;’s ‘prototype’ property, whereas object’s prototype is the object created and inherited from. The reason why this is done this way will be become clear in the next section.&lt;/p&gt;

&lt;h3 id=&quot;constructor&quot;&gt;Constructor&lt;/h3&gt;

&lt;p&gt;As mentioned by Douglas Crockford in &lt;a href=&quot;http://shop.oreilly.com/product/9780596517748.do&quot;&gt;JavaScript:The Good Parts&lt;/a&gt;, JavaScript is conflicted about its prototypal nature. It was trying to emulate classical languages on constructing objects using the ‘&lt;em&gt;new&lt;/em&gt;’ keyword. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// a simple constructor
var MyConstructor = function () {
	this.name = &quot;Rui&quot;;
}

// create a new object
var myObj = new MyConstructor();

// prints &#39;Rui&#39;
console.log(myObj.name);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What happened was that a new object will be created if the &lt;em&gt;myConstructor&lt;/em&gt; function is invoked with the ‘&lt;em&gt;new&lt;/em&gt;’ prefix. ‘&lt;em&gt;this&lt;/em&gt;’ in the constructor function will be bound to the newly created object, and all the properties will be added to the new object directly. The new object will be returned as the result of the constructor call. &lt;/p&gt;

&lt;p&gt;More importantly, the prototype of the newly created object (&lt;em&gt;myObj&lt;/em&gt;) is the value of the function’s ‘prototype’ property. So if we change the code slightly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// a simple constructor
var MyConstructor = function () {
	this.name = &quot;Rui&quot;;
}

MyConstructor.prototype = {surname : &quot;Wang&quot;};

// create a new object
var myObj = new MyConstructor();

// prints &#39;Wang&#39;
console.log(myObj.surname);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above, we have assigned a new object to &lt;em&gt;MyConstructor.prototype&lt;/em&gt; with property ‘surname’. &lt;em&gt;myObj&lt;/em&gt; inherits this property, so the value of &lt;em&gt;MyConstructor.prototype&lt;/em&gt; becomes the prototype of &lt;em&gt;myObj&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;All constructor functions are normal functions in JavaScript. When a function object is created, the code that produces the function object runs something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.prototype = {constructor : this}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So by default, invoking ‘&lt;em&gt;new&lt;/em&gt;’ on a constructor is going to produce an object that its prototype has a ‘constructor’ property, this property points to the original constructor function object. &lt;/p&gt;

&lt;h3 id=&quot;alternative&quot;&gt;Alternative&lt;/h3&gt;

&lt;p&gt;Instead of calling the constructor, one can adopt the coding pattern suggested by Douglas Crockford:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (typeof Object.create !== &#39;function&#39;) {
	Object.create = function (o) {
		var F = function() {};
		F.prototype = o;
		return new F();
	};
}

var newObj = Object.create(oldObj);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;other-resources&quot;&gt;Other resources&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://zeekat.nl/articles/constructors-considered-mildly-confusing.html&quot;&gt;Constructors Considered Mildly Confusing&lt;/a&gt; provides nice diagrams that illustrate the points above.&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Nov 2014 20:27:19 +0000</pubDate>
        <link>http://ruiwanguk.github.com/javascript/2014/11/04/JavaScript-Constructor/</link>
        <guid isPermaLink="true">http://ruiwanguk.github.com/javascript/2014/11/04/JavaScript-Constructor/</guid>
      </item>
    
      <item>
        <title>Access MySQL using R</title>
        <description>&lt;p&gt;For data scientists, getting and cleaning data is one of most important step in their data analysis work flow. High quality data paves the way for well structured and executed data analysis, whereas poor quality data can often lead to misguided discoveries.  &lt;/p&gt;

&lt;p&gt;Relational DBMS such as MySQL and Oracle are frequently used to store preprocessed and structured data. It is therefore important to understand how to connect to relational databases and retrieve required information from its tables. In this post, I will cover how to use R to access MySQL databases. &lt;/p&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;p&gt;Before you can connect to MySQL, you need to install RMySQL packages in your R. If you are using Mac, it is fairly straightforward. Simply type the following command in your R terminal. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; install.packages(&quot;RMySQL&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are using Windows, it is a bit more complicated. But this is already well documented on &lt;a href=&quot;http://cran.r-project.org/web/packages/RMySQL&quot;&gt;RMySQL official site&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;connect-to-mysql&quot;&gt;Connect to MySQL&lt;/h3&gt;

&lt;p&gt;Now you are ready to go, make sure that you have an existing MySQL database which you have access permission. Or, you can &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.1/en/installing.html&quot;&gt;install MySQL&lt;/a&gt; locally and create a test database yourself. &lt;/p&gt;

&lt;p&gt;Here, I am using the public facing MySQL instance provided by the Proteomics Identifications data (&lt;a href=&quot;http://www.ebi.ac.uk/pride&quot;&gt;PRIDE&lt;/a&gt;). It stores the protein and peptide identification evidences produced by mass spectrometers. Here are the database connection details:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host: 193.62.194.210
Port: 5000 
Database: pride_2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to use the same database as your playground, please check the connection command below for user name and password. But do be careful with the mass selects and joins, as these queries can consume a lot of resources and return many rows of data.&lt;/p&gt;

&lt;p&gt;Connect to the database using the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; con &amp;lt;- dbConnect(MySQL(), user=&quot;inspector&quot;, password=&quot;inspector&quot;, 
	dbname=&quot;pride_2&quot;, host=&quot;193.62.194.210&quot;, port=5000)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;query-mysql&quot;&gt;Query MySQL&lt;/h3&gt;

&lt;p&gt;So you are now connected, you try the following commands to list tables and list the fields in a table:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# list tables
&amp;gt; dbListTable(con)

# list fields in the &#39;pride_experiment&#39; table
&amp;gt; dbListFields(con, &quot;pride_experiment&quot;)	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also do a select query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# count the number of rows in the &#39;pride_experiment&#39; table
&amp;gt; dbGetQuery(con, &quot;select count(*) from pride_experiment&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you want to page your results:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# get the first 100 rows from the &#39;pride_experiment&#39; table
&amp;gt; rs &amp;lt;- dbSendQuery(con, &quot;select * from pride_experiment limit 1000&quot;)
&amp;gt; data &amp;lt;- fetch(rs, 100)

# or you can get all the records in one go using -1
&amp;gt; data &amp;lt;- fetch(rs, -1)

# once you are done, you should clear the result set
&amp;gt; dbClearResult(rs)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;close-your-connections&quot;&gt;Close your connections&lt;/h3&gt;

&lt;p&gt;Finally, it is important that you remember to close the connection once you done:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; dbDisconnect(con)		
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;other-resources&quot;&gt;Other resources&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://cran.r-project.org/web/packages/RMySQL/RMySQL.pdf&quot;&gt;RMySQL vignette&lt;/a&gt; provides a list of commonly used commands&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.r-bloggers.com/mysql-and-r/&quot;&gt;MySQL and R&lt;/a&gt; is a nice blog post on additional RMySQL tips. &lt;/p&gt;
</description>
        <pubDate>Tue, 14 Oct 2014 09:47:19 +0100</pubDate>
        <link>http://ruiwanguk.github.com/r/database/2014/10/14/how-access-mysql-using-r/</link>
        <guid isPermaLink="true">http://ruiwanguk.github.com/r/database/2014/10/14/how-access-mysql-using-r/</guid>
      </item>
    
  </channel>
</rss>
